export default Confetti;
type Confetti = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<Props>): void;
};
declare const Confetti: import("svelte").Component<{
    /**
     * The maximum size of each confetti piece, each piece will randomly be given a size up to this number
     */
    size?: number | undefined;
    /**
     * The X multiplier of the distance between which the pieces will fly horizontally
     */
    x?: [number, number] | undefined;
    /**
     * The Y multiplier of the distance between which the pieces will fly vertically
     */
    y?: [number, number] | undefined;
    /**
     * The total duration of the animation in milliseconds
     */
    duration?: number | undefined;
    /**
     * Whether the effect should loop infinitely
     */
    infinite?: boolean | undefined;
    /**
     * Range of random delay between two values, in milliseconds, which will be randomly given to each piece
     */
    delay?: [number, number] | undefined;
    /**
     * Hue color range between which the confetti will be colored
     */
    colorRange?: [number, number] | undefined;
    /**
     * An array of colors in any valid CSS value, colors will be asigned to each piece randomly from this array
     */
    colorArray?: string[] | undefined;
    /**
     * The amount of confetti pieces in total, high numbers might lead to performance issues
     */
    amount?: number | undefined;
    /**
     * The number of times the animation will fire, allows any value valid for the css prop `animation-iteration-count`
     */
    iterationCount?: number | "infinite" | "initial" | "inherit" | undefined;
    /**
     * The distance elements fall, represented as a css value such as "10px" or "5rem"
     */
    fallDistance?: string | undefined;
    /**
     * Whether the confetti pieces should have rounded edges
     */
    rounded?: boolean | undefined;
    /**
     * Whether the effect should be shaped like a cone, rather than more box-shaped
     */
    cone?: boolean | undefined;
    /**
     * Whether gravity should be disabled for the effect
     */
    noGravity?: boolean | undefined;
    /**
     * The horizontal spread of the effect as it falls down, from 0 to 1
     */
    xSpread?: number | undefined;
    /**
     * Whether to destroy the elements after the animation is complete
     */
    destroyOnComplete?: boolean | undefined;
    /**
     * Disable the effect if reduced motion is enabled
     */
    disableForReducedMotion?: boolean | undefined;
}, {}, "">;
type Props = {
    /**
     * The maximum size of each confetti piece, each piece will randomly be given a size up to this number
     */
    size?: number | undefined;
    /**
     * The X multiplier of the distance between which the pieces will fly horizontally
     */
    x?: [number, number] | undefined;
    /**
     * The Y multiplier of the distance between which the pieces will fly vertically
     */
    y?: [number, number] | undefined;
    /**
     * The total duration of the animation in milliseconds
     */
    duration?: number | undefined;
    /**
     * Whether the effect should loop infinitely
     */
    infinite?: boolean | undefined;
    /**
     * Range of random delay between two values, in milliseconds, which will be randomly given to each piece
     */
    delay?: [number, number] | undefined;
    /**
     * Hue color range between which the confetti will be colored
     */
    colorRange?: [number, number] | undefined;
    /**
     * An array of colors in any valid CSS value, colors will be asigned to each piece randomly from this array
     */
    colorArray?: string[] | undefined;
    /**
     * The amount of confetti pieces in total, high numbers might lead to performance issues
     */
    amount?: number | undefined;
    /**
     * The number of times the animation will fire, allows any value valid for the css prop `animation-iteration-count`
     */
    iterationCount?: number | "infinite" | "initial" | "inherit" | undefined;
    /**
     * The distance elements fall, represented as a css value such as "10px" or "5rem"
     */
    fallDistance?: string | undefined;
    /**
     * Whether the confetti pieces should have rounded edges
     */
    rounded?: boolean | undefined;
    /**
     * Whether the effect should be shaped like a cone, rather than more box-shaped
     */
    cone?: boolean | undefined;
    /**
     * Whether gravity should be disabled for the effect
     */
    noGravity?: boolean | undefined;
    /**
     * The horizontal spread of the effect as it falls down, from 0 to 1
     */
    xSpread?: number | undefined;
    /**
     * Whether to destroy the elements after the animation is complete
     */
    destroyOnComplete?: boolean | undefined;
    /**
     * Disable the effect if reduced motion is enabled
     */
    disableForReducedMotion?: boolean | undefined;
};
